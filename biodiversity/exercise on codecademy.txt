import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
print(species.head())

################ part 2 #############

#how many different species
species_count = species.scientific_name.nunique()
#how many different type, but no repeat
species_type = species.category.unique()

conservation_statuses = species.conservation_status.unique()

######## part 3 ############

#group different species count in their category
conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()

print(conservation_counts)

###### part 4 ##############

# replace all nan to no intervention 
species.fillna('No Intervention', inplace = True)

#fixe the conservation counts
conservation_counts_fixed = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print(conservation_counts_fixed)

############## part 5 ##########

#sort the number from small to large instead alphabetically
protection_counts = species.groupby('conservation_status')\
    .scientific_name.nunique().reset_index()\
    .sort_values(by='scientific_name')
print(protection_counts)

#plot a barchart
scientific_name = protection_counts['scientific_name']
conservation_status =  protection_counts['conservation_status']

plt.figure(figsize=(10,4))
ax = plt.subplot()
plt.bar(range(len(conservation_status)), scientific_name)
ax.set_xticks(range(5))
ax.set_xticklabels(conservation_status)
plt.xlabel('conversation status')
plt.ylabel('Number of Species')
plt.title('Conservation Status by Species')
plt.show()

######## part 6 ################

mylambda = lambda x: True if x != 'No Intervention' else False
species['is_protected'] = species.conservation_status.apply(mylambda)

category_counts = species.groupby(['category', 'is_protected']).scientific_name.unique().reset_index()

print(category_counts.head())

category_pivot = category_counts.pivot(
  columns='is_protected',
  index='category',
  values='scientific_name'
).reset_index()

print(category_pivot)

########### part 7 ############

category_pivot.columns = ['category', 'not_protected', 'protected']

# Uncomment this to pass the second checkpoint
category_pivot['percent_protected'] = category_pivot.protected / (category_pivot.protected + category_pivot.not_protected)

print category_pivot

###### part 8 #############

import codecademylib
import pandas as pd
from matplotlib import pyplot as plt
from scipy.stats import chi2_contingency

contingency = [[30, 146],
              [75, 413]]

pval = chi2_contingency(contingency)[1]
print(pval)
# No significant difference because pval > 0.05

contingency_reptile_mammal = [[30, 146],
                              [5, 73]]

pval_reptile_mammal = chi2_contingency(contingency_reptile_mammal)[1]
print(pval_reptile_mammal)
# Significant difference! pval_reptile_mammal < 0.05

######### part 11 #############

species = pd.read_csv('species_info.csv')
species.fillna('No Intervention', inplace = True)
species['is_protected'] = species.conservation_status != 'No Intervention'

observations = pd.read_csv('observations.csv')
print(observations.head())

mylambda = lambda x: True if 'Sheep' in x else False
species['is_sheep'] = species.common_names.apply(mylambda)

species_is_sheep = species[species.is_sheep == True]

print(species_is_sheep.head())

sheep_species = species[(species.is_sheep == True) & (species.category == 'Mammal')]

print(sheep_species)

############# part 10 ###################

import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
species.fillna('No Intervention', inplace = True)
species['is_protected'] = species.conservation_status != 'No Intervention'

observations = pd.read_csv('observations.csv')
print(observations.head())

############# part 11 #################

mylambda = lambda x: True if 'Sheep' in x else False
species['is_sheep'] = species.common_names.apply(mylambda)

species_is_sheep = species[species.is_sheep == True]

print(species_is_sheep.head())

sheep_species = species[(species.is_sheep == True) & (species.category == 'Mammal')]

############ part 12 ################

sheep_observations = species.merge(sheep_species).merge(observations)

print(sheep_observations.head())

obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()

print(obs_by_park)

############ part 13 #################

obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()

#bar chart
bar_height = obs_by_park['observations']
x_range = obs_by_park['park_name']
plt.figure(figsize=(16, 4))
ax = plt.subplot()
plt.bar(range(len(x_range)), bar_height)
ax.set_xticks(range(len(x_range)))
ax.set_xticklabels(x_range)
plt.xlabel('observations')
plt.ylabel('Number of Observations')
plt.title('Observations of Sheep per Week')
plt.show()

############ part 14 #############

baseline = 15

#100 * x / baseline
minimum_detectable_effect = 100*5./15

sample_size_per_variant = 870

yellowstone_weeks_observing = sample_size_per_variant/507.

#one of the number has to be float

bryce_weeks_observing = sample_size_per_variant/250.