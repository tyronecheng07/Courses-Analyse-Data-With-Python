most_expensive = orders.price.max()
num_colors = orders.shoe_color.nunique()

################# group by aggregation ##########

df.groupby('column1').column2.measurement()

pricey_shoes = orders.groupby('shoe_type').price.max()

print(type(pricey_shoes))
Series

pricey_shoes = orders.groupby('shoe_type').price.max().reset_index()
type is now dataframe

cheap_shoes = orders.groupby('shoe_color').price.apply(lambda x: np.percentile(x, 25)).reset_index()

shoe_counts = orders.groupby(['shoe_type', 'shoe_color']).id.count().reset_index()

########## pivot table rearrange ############

shoe_counts_pivot = shoe_counts.pivot(
  columns='shoe_color',
  index='shoe_type',
  values='id').reset_index()

############# review ################

click_source = user_visits.groupby('utm_source').month.count().reset_index()

print(click_source)

click_source_by_month = user_visits.groupby(['utm_source', 'month']).last_name.count().reset_index()

click_source_by_month_pivot = click_source_by_month.pivot(
  columns='month',
  index='utm_source',
  values='last_name'
).reset_index()

###### project ###############

import codecademylib
import pandas as pd

ad_clicks = pd.read_csv('ad_clicks.csv')
print(ad_clicks.head())

print(ad_clicks.groupby('utm_source').user_id.count().reset_index())

ad_clicks['is_click'] = ~ad_clicks.ad_click_timestamp.isnull()

clicks_by_source = ad_clicks.groupby(['utm_source', 'is_click']).user_id.count().reset_index()

print(clicks_by_source)

clicks_pivot = clicks_by_source.pivot(
  columns='is_click',
  index='utm_source',
  values='user_id'
).reset_index()

print(clicks_pivot)
#number of true divided by total number
clicks_pivot['percent_clicked'] = clicks_pivot[True] / (clicks_pivot[True] + clicks_pivot[False])

print(ad_clicks.groupby('experimental_group').user_id.count().reset_index())
  
print(ad_clicks.groupby('experimental_group').user_id.count().reset_index().pivot(
  columns='is_click',
  index='experimental_group',
  values='user_id').reset_index())

### create DataFrame for A,B ####
a_clicks = ad_clicks[ad_clicks.experimental_group == 'A']
b_clicks = ad_clicks[ad_clicks.experimental_group == 'B']

a_clicks_pivot = a_clicks.groupby(['is_click', 'day']).user_id.count().reset_index().pivot(
  columns='is_click',
  index='day',
  values='user_id'
).reset_index()

b_clicks_pivot = b_clicks.groupby(['is_click', 'day']).user_id.count().reset_index().pivot(
  columns='is_click',
  index='day',
  values='user_id'
).reset_index()

a_clicks_pivot['percent_clicked'] = a_clicks_pivot[True] / (a_clicks_pivot[True] + a_clicks_pivot[False])

print(a_clicks_pivot)

b_clicks_pivot['percent_clicked'] = b_clicks_pivot[True] / (b_clicks_pivot[True] + b_clicks_pivot[False])

print(b_clicks_pivot)